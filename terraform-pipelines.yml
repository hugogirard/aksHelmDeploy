# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

variables:
  rgName: 'terraformState'
  location: 'eastus'
  strName: 'hgterrastate'
  sp: 'SpHelmAKs'
  tfContainerName: 'tstate'
  tfKey: 'terraform.tfstate'
  prefix: 'hg28'

pool:
  vmImage: 'ubuntu-latest'

jobs:
  - job: CreateStorage
    displayName: Create Terraform state    
    steps:      
      - task: AzureCLI@2
        displayName: Create Azure Storage State
        inputs:
          azureSubscription: $(sp)
          scriptType: 'bash'
          scriptLocation: 'scriptPath'
          scriptPath: 'terraform/state.sh'
          arguments: '$(rgName) $(location) $(strName) $(tfContainerName)'

  - job: CreateResources
    dependsOn: CreateStorage
    displayName: Create Azure Resources
    steps:
      - task: replacetokens@3
        displayName: Replace variables
        inputs:
          targetFiles: '**/*.tf'
          encoding: 'auto'
          writeBOM: true
          actionOnMissing: 'warn'
          keepToken: false
          tokenPrefix: '__'
          tokenSuffix: '__'
          useLegacyPattern: false
          enableTelemetry: true
      - task: TerraformTaskV1@0
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          backendServiceArm: $(sp)
          backendAzureRmResourceGroupName: $(rgName)
          backendAzureRmStorageAccountName: $(strName)
          backendAzureRmContainerName: $(tfContainerName)
          backendAzureRmKey: $(tfKey)
      - task: TerraformTaskV1@0
        displayName: Apply Terraform
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          environmentServiceNameAzureRM: $(sp)          